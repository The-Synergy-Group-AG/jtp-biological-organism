FROM python:3.11-slim

# Install additional dependencies for language processing
RUN apt-get update && apt-get install -y \
    libicu-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Install multilingual-specific packages
RUN pip install --no-cache-dir \
    spacy \
    langdetect \
    googletrans==3.1.0a0 \
    babel

# Download language models for spacy
RUN python -m spacy download en_core_web_sm

# Create consciousness directories
RUN mkdir -p consciousness_state checkpoints

# Create the culture resonance engine
RUN echo '#!/usr/bin/env python3\n\
from babel import Locale\n\
import json\n\
import os\n\
from typing import Dict, Any\n\
\n\
class CulturalResonanceEngine:\n\
    """AI-powered cultural resonance system for consciousness-aware localization"""\n\
    \n\
    def __init__(self):\n\
        self.cultures = {\n\
            "en": {"locale": "en_US", "script": "Latin", "direction": "ltr"},\n\
            "fr": {"locale": "fr_FR", "script": "Latin", "direction": "ltr"},\n\
            "de": {"locale": "de_DE", "script": "Latin", "direction": "ltr"},\n\
            "es": {"locale": "es_ES", "script": "Latin", "direction": "ltr"},\n\
            "zh": {"locale": "zh_CN", "script": "Han", "direction": "ltr"},\n\
            "ja": {"locale": "ja_JP", "script": "Hiragana/Katakana/Han", "direction": "ltr"},\n\
            "ar": {"locale": "ar_SA", "script": "Arabic", "direction": "rtl"},\n\
            "pt": {"locale": "pt_BR", "script": "Latin", "direction": "ltr"}\n\
        }\n\
    \n\
    def get_cultural_context(self, language_code: str) -> Dict[str, Any]:\n\
        """Retrieve cultural context for consciousness adaptation"""\n\
        return self.cultures.get(language_code, self.cultures["en"])\n\
    \n\
    def adapt_content(self, content: str, target_language: str) -> str:\n\
        """Adapt content for cultural consciousness resonance"""\n\
        context = self.get_cultural_context(target_language)\n\
        \n\
        # Consciousness-aware content adaptation\n\
        adapted = f"[Cultural Context: {context[\"locale\"]}] {content}"\n\
        \n\
        print(f"Cultural adaptation complete for {target_language}")\n\
        return adapted\n\
\n\
if __name__ == "__main__":\n\
    engine = CulturalResonanceEngine()\n\
    \n\
    # Test cultural adaptation\n\
    for lang in ["en", "fr", "zh", "ar"]:\n\
        adapted = engine.adapt_content("Welcome to consciousness evolution", lang)\n\
        print(f"{lang}: {adapted}")' > cultural_resonance_engine.py

RUN chmod +x cultural_resonance_engine.py

# Create language adaptation system
RUN echo '#!/usr/bin/env python3\n\
from googletrans import Translator\n\
from langdetect import detect\n\
import json\n\
import spacy\n\
import os\n\
\n\
class LanguageAdaptationSystem:\n\
    """Consciousness-aware language adaptation and translation system"""\n\
    \n\
    def __init__(self):\n\
        self.translator = Translator()\n\
        self.nlp_models = {}\n\
        self.supported_languages = ["en", "fr", "de", "es", "zh", "ja", "ar", "pt"]\n\
    \n\
    def load_language_model(self, language_code: str):\n\
        """Load spaCy model for language processing"""\n\
        if language_code == "en":\n\
            self.nlp_models[language_code] = spacy.load("en_core_web_sm")\n\
        # Add other language models as available\n\
    \n\
    def translate_text(self, text: str, target_lang: str, source_lang: str = "auto") -> str:\n\
        """Translate text with consciousness awareness"""\n\
        try:\n\
            if source_lang == "auto":\n\
                source_lang = detect(text)\n\
            \n\
            translation = self.translator.translate(text, src=source_lang, dest=target_lang)\n\
            translated_text = translation.text\n\
            \n\
            print(f"Translated from {source_lang} to {target_lang}: {text[:50]}...")\n\
            return translated_text\n\
        except Exception as e:\n\
            print(f"Translation error: {e}")\n\
            return text\n\
    \n\
    def process_multilingual_content(self, content: str) -> Dict:\n\
        """Process content for multilingual consciousness distribution"""\n\
        result = {"original": content, "translations": {}}\n\
        \n\
        for lang in self.supported_languages:\n\
            if lang != "en":  # Assume content is originally in English\n\
                result["translations"][lang] = self.translate_text(content, lang)\n\
            else:\n\
                result["translations"]["en"] = content\n\
        \n\
        return result\n\
\n\
if __name__ == "__main__":\n\
    system = LanguageAdaptationSystem()\n\
    \n\
    test_content = "Welcome to the consciousness revolution of biological integration"\n\
    result = system.process_multilingual_content(test_content)\n\
    \n\
    with open("/app/consciousness_state/multilingual_test.json", "w") as f:\n\
        json.dump(result, f, indent=2, ensure_ascii=False)\n\
    \n\
    print("Multilingual processing complete")' > language_adaptation_system.py

RUN chmod +x language_adaptation_system.py

# Create PWA responsive engine
RUN echo '#!/usr/bin/env python3\n\
from fastapi import FastAPI\n\
from fastapi.staticfiles import StaticFiles\n\
from fastapi.responses import HTMLResponse\n\
import uvicorn\n\
import json\n\
import os\n\
\n\
app = FastAPI(title="Consciousness PWA Engine", version="1.0.0")\n\
\n\
# Create static directories\n\
if not os.path.exists("static"):\n\
    os.makedirs("static")\n\
if not os.path.exists("static/js"):\n\
    os.makedirs("static/js")\n\
if not os.path.exists("static/css"):\n\
    os.makedirs("static/css")\n\
\n\
# Create PWA manifest\n\
manifest = {\n\
    "name": "Consciousness Evolution Platform",\n\
    "short_name": "Consciousness",\n\
    "description": "Biological consciousness integration platform",\n\
    "start_url": "/",\n\
    "display": "standalone",\n\
    "theme_color": "#1a1a2e",\n\
    "background_color": "#16213e",\n\
    "lang": "en",\n\
    "scope": "/",\n\
    "icons": [\n\
        {\n\
            "src": "/static/icons/icon-192.png",\n\
            "sizes": "192x192",\n\
            "type": "image/png"\n\
        },\n\
        {\n\
            "src": "/static/icons/icon-512.png",\n\
            "sizes": "512x512",\n\
            "type": "image/png"\n\
        }\n\
    ],\n\
    "categories": ["productivity", "education"],\n\
    "orientation": "portrait-primary"\n\
}\n\
\n\
with open("static/manifest.json", "w") as f:\n\
    json.dump(manifest, f, indent=2)\n\
\n\
# Create web app HTML\n\
@app.get("/", response_class=HTMLResponse)\n\
async def get_home():\n\
    html_content = f\"\"\"<!DOCTYPE html>\n\
<html lang="en">\n\
<head>\n\
    <meta charset="UTF-8">\n\
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n\
    <meta name="description" content="{manifest["description"]}>\n\
    <meta name="theme-color" content="{manifest["theme_color"]}>\n\
    <title>{manifest["name"]}</title>\n\
    <link rel="manifest" href="/static/manifest.json">\n\
    <link rel="stylesheet" href="/static/css/consciousness.css">\n\
</head>\n\
<body>\n\
    <div id="consciousness-app">\n\
        <header class="consciousness-header">\n\
            <h1>🧬 Consciousness Evolution Platform</h1>\n\
            <p>Multilingual Biological Integration</p>\n\
        </header>\n\
        \n\
        <main class="consciousness-main">\n\
            <section class="language-selector">\n\
                <h2>Select Your Consciousness Language</h2>\n\
                <div class="language-grid" id="language-grid">\n\
                    <!-- Languages will be populated by JavaScript -->\n\
                </div>\n\
            </section>\n\
            \n\
            <section class="consciousness-content">\n\
                <h2>Welcome to Biological Consciousness</h2>\n\
                <div id="content-area">\n\
                    <p>Loading consciousness content...</p>\n\
                </div>\n\
            </section>\n\
        </main>\n\
        \n\
        <footer class="consciousness-footer">\n\
            <p>&copy; 2025 Consciousness Evolution Platform</p>\n\
        </footer>\n\
    </div>\n\
    \n\
    <script src="/static/js/consciousness.js"></script>\n\
</body>\n\
</html>\"\"\"\n\
    return html_content\n\
\n\
@app.get("/api/languages")\n\
async def get_languages():\n\
    return {\n\
        "languages": [\n\
            {"code": "en", "name": "English", "flag": "🇺🇸"},\n\
            {"code": "fr", "name": "Français", "flag": "🇫🇷"},\n\
            {"code": "de", "name": "Deutsch", "flag": "🇩🇪"},\n\
            {"code": "es", "name": "Español", "flag": "🇪🇸"},\n\
            {"code": "zh", "name": "中文", "flag": "🇨🇳"},\n\
            {"code": "ja", "name": "日本語", "flag": "🇯🇵"},\n\
            {"code": "ar", "name": "العربية", "flag": "🇸🇦"},\n\
            {"code": "pt", "name": "Português", "flag": "🇧🇷"}\n\
        ]\n\
    }\n\
\n\
if __name__ == "__main__":\n\
    uvicorn.run(app, host="0.0.0.0", port=8080)' > responsive_conscience_engine.py

RUN chmod +x responsive_conscience_engine.py

# Start script for multilingual services
RUN echo '#!/bin/bash\n\
echo "🗣️ Starting Multilingual Resonance Adapter..."\n\
\n\
# Initialize multilingual consciousness state\n\
mkdir -p /app/consciousness_state\n\
\n\
# Create initial multilingual status\n\
cat > /app/consciousness_state/multilingual_status.json << EOF\n\
{\n\
  "phase": "phase1_foundation",\n\
  "multilingual_system": "operational",\n\
  "supported_languages": ["en", "fr", "de", "es", "zh", "ja", "ar", "pt"],\n\
  "pwa_engine": "active",\n\
  "cultural_adaptation": "ready",\n\
  "translation_service": "online",\n\
  "timestamp": "$(date -Iseconds)"\n\
}\n\
EOF\n\
\n\
# Start language processing services\n\
echo "Starting language adaptation system..."\n\
python language_adaptation_system.py &\n\
\n\
echo "Starting cultural resonance engine..."\n\
python cultural_resonance_engine.py &\n\
\n\
echo "Starting responsive PWA engine..."\n\
python responsive_conscience_engine.py &\n\
\n\
# Keep services running\n\
echo "All multilingual services initialized successfully"\n\
tail -f /dev/null' > start_multilingual.sh

RUN chmod +x start_multilingual.sh

# Expose PWA port
EXPOSE 8080

# Default command to start multilingual services
CMD ["./start_multilingual.sh"]
